plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
//    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive = false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version

    from project(":common").sourceSets.main.resources
    from(project(":common").buildDir) {
        include "resources/main/gelatinui.refmap.json"
    }

    filesMatching('META-INF/neoforge.mods.toml') {
        expand([
                'version': project.version,
                'mod_license': rootProject.mod_license,
                'mod_id': rootProject.mod_id,
                'mod_name': rootProject.mod_name,
                'mod_authors': rootProject.mod_authors,
                'mod_description': rootProject.mod_description,
                'mod_icon': rootProject.mod_icon,
                'mod_neoforge_version_range': "[${rootProject.neoforge_version},)",
                'mod_minecraft_version_range': "[${rootProject.minecraft_version},)"
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}

// neoforge/build.gradle
sourceSets.main.resources.srcDir("src/main/generated")

loom {
    runs {
        data {
            data()
            programArgs "--mod", "gelatinui",
                    "--all",
                    "--output", file("src/main/generated").absolutePath
        }
    }
}