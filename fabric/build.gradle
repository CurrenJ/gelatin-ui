plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    
    // Mixin annotation processor
    annotationProcessor group:'org.spongepowered', name: 'mixin', version: '0.8.5:processor'

    common(project(path: ':common', configuration: 'namedElements')) { transitive = false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    dependsOn ':common:processResources'
    inputs.property 'version', project.version

    from project(":common").sourceSets.main.resources
    from(project(":common").buildDir) {
        include "resources/main/gelatinui.refmap.json"
    }
    from file("src/main/generated")

    filesMatching('fabric.mod.json') {
        expand([
                'version': project.version,
                'mod_id': rootProject.mod_id,
                'mod_name': rootProject.mod_name,
                'mod_description': rootProject.mod_description,
                'mod_authors': rootProject.mod_authors,
                'mod_license': rootProject.mod_license,
                'mod_icon': rootProject.mod_icon,
                'mod_fabric_minecraft_version': "~${rootProject.minecraft_version}"
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}

loom {
    mixin {
        defaultRefmapName.set("gelatinui.refmap.json")
    }
    runs {
        datagen {
            inherit client
            name = "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=gelatinui"

            runDir "build/datagen"
        }
    }
}
